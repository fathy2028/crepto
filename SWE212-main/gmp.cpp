#include <gmp.h>
#include <chrono>
#include <iostream>



void karatsubaMultiplication(mpz_t result, mpz_t x, mpz_t y) {
    int n = mpz_sizeinbase(x, 2) > mpz_sizeinbase(y, 2) ? mpz_sizeinbase(x, 2) : mpz_sizeinbase(y, 2);

    if (n <= 1) {
        mpz_mul(result, x, y);
        return;
    }

    n = (n / 2) + (n % 2);

    mpz_t xh, xl, yh, yl, prod1, prod2, prod3, temp, base, base2;
    mpz_inits(xh, xl, yh, yl, prod1, prod2, prod3, temp, base, base2, NULL);

    mpz_ui_pow_ui(base, 2, n);
    mpz_ui_pow_ui(base2, 2, 2*n);

    mpz_fdiv_qr(xh, xl, x, base);
    mpz_fdiv_qr(yh, yl, y, base);

    karatsubaMultiplication(prod1, xh, yh);
    karatsubaMultiplication(prod2, xl, yl);

    mpz_add(temp, xh, xl);
    mpz_add(result, yh, yl);
    karatsubaMultiplication(prod3, result, temp);

    mpz_sub(prod3, prod3, prod2);
    mpz_sub(prod3, prod3, prod1);

    mpz_mul(prod1, prod1, base2);
    mpz_mul(prod3, prod3, base);
    mpz_add(result, prod1, prod2);
    mpz_add(result, result, prod3);

    mpz_clears(xh, xl, yh, yl, prod1, prod2, prod3, temp, base, base2, NULL);
}

void schoolbookMultiplication(mpz_t result, const mpz_t x, const mpz_t y) {
    mpz_set_ui(result, 0);  // Initialize result as 0

    mpz_t multiplier, temp, pow_10;
    mpz_inits(multiplier, temp, pow_10, NULL);

    std::string y_str = mpz_get_str(NULL, 10, y); // Convert y to a string

    for (int i = y_str.size()-1; i >= 0; i--) {
        int digit = y_str[i] - '0';  // Convert char to int

        mpz_set_ui(multiplier, digit);
        mpz_mul(temp, x, multiplier);  // Multiply x by the current digit of y

        mpz_ui_pow_ui(pow_10, 10, y_str.size()-1 - i);
        mpz_mul(temp, temp, pow_10); // Multiply by 10^(y_str.size()-1 - i) to shift left

        mpz_add(result, result, temp);  // Add the result to the running total
    }

    mpz_clears(multiplier, temp, pow_10, NULL);
}
int main()
{
    mpz_t x, y, result;
    mpz_inits(x, y, result, NULL);

    mpz_set_str(x
    mpz_set_str(y

    auto start = std::chrono::high_resolution_clock::now();
    mpz_mul(result, x, y); // Traditional multiplication
    auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    std::cout << "Time taken for traditional multiplication: "
              << duration.count() << " microseconds" << std::endl;
    //gmp_printf("Result: %Zd\n", result);

    start = std::chrono::high_resolution_clock::now();
    karatsubaMultiplication(result, x, y); // Karatsuba multiplication
    stop = std::chrono::high_resolution_clock::now();
    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    std::cout << "Time taken for Karatsuba multiplication: "
              << duration.count() << " microseconds" << std::endl;
    //gmp_printf("Result: %Zd\n", result);

    start = std::chrono::high_resolution_clock::now();
    schoolbookMultiplication(result, x, y); // schoolbook multiplication
    stop = std::chrono::high_resolution_clock::now();
    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    std::cout << "Time taken for schoolbook multiplication: "
              << duration.count() << " microseconds" << std::endl;
   // gmp_printf("Result: %Zd\n", result);

    mpz_clears(x, y, result, NULL);

    return 0;
}
